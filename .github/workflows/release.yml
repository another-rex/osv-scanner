name: Start release pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version tag to release, (e.g. v1.2.3)'
        required: true
        type: string
      commit:
        description: 'The commit hash to release'
        required: true
        type: string

permissions:
  contents: read # to fetch code (actions/checkout)
  # Require writing security events to upload SARIF file to security tab
  security-events: write

jobs:
  osv-scan:
    uses: ./.github/workflows/osv-scanner-reusable.yml
    with:
      # Only scan the top level go.mod file without recursively scanning directories since
      # this is pipeline is about releasing the go module and binary
      scan-args: |-
        --skip-git
        ./

  lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          persist-credentials: false
          ref: ${{ inputs.commit }}
      - name: Set up Go
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version-file: .go-version
          check-latest: true
      - name: Run lint action
        uses: ./.github/workflows/lint-action
  tests:
    name: Run unit tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          persist-credentials: false
          ref: ${{ inputs.commit }}
      - name: Set up Go
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version-file: .go-version
          check-latest: true
      - name: Run test action
        uses: ./.github/workflows/test-action
  tag-release:
    runs-on: ubuntu-latest
    needs:
      - lint
      - tests
      - osv-scan
    permissions:
      contents: write  # to write a tag
    steps:
      - name: Create tag
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ inputs.version }}',
              sha: '${{ inputs.commit }}'
            })